----
presentation_title: Parrot: State of the VM
presentation_notes: slides at mksig.org/slides/osb11
----
* Who here has used PHP?
{image: http://farm3.static.flickr.com/2342/2516515847_5a2566f26f_m_d.jpg}
+* Who's used another language? (Perl, Python, Ruby, Scala, Haskell)
{image: http://farm4.static.flickr.com/3177/3070754858_861f1200f1_z_d.jpg}
+* What if they could work together to make something wonderful?
+* {image: http://farm4.static.flickr.com/3430/4556206100_a922d9e5af_d.jpg}

----
* Dynamic language interoperability is the dream.
+* my dream
+* a dream
+* Fructose (github.com/charliesome/Fructose) does this for Ruby to PHP
* we want to make it possible for everyone
{image: http://farm6.static.flickr.com/5285/5372478987_50e34fddfd_d.jpg}
+* All this is bit different from how Parrot started.

----
== Where did Parrot come from?
* Rakudo Perl 6
* needed a distinct VM
* now we want to take over the world
{image: http://farm1.static.flickr.com/26/90110137_22c7cf1286_d.jpg}

----
== What kind of a virtual machine is Parrot?
* "virtual machine" means "implements a computer in software"
* not hardware virtualization like VMWare, EC2, etc
* emulate a computer that doesn't exist in hardware
* better living through abstraction!

----
== What is Parrot?
* virtual machine, tools and runtime for dynamic language implementations
* interoperable dynamic languages 
* libparrot
* PIR compiler
* nqp (not quite Perl 6) for building languages
* complete implementations exist of Rakudo, Partcl and Lua
* JavaScript and Python3 (GSoC)
* many other languages at various stages

----
== Parrot's Goals
* language interoperability
* VM for dynamic languages
* portability
* but first, the characters
----
== PASM
* Parrot assembly language
* the assembly langauge that isn't
* usually very low-level
{image: http://mksig.org/img/kakapo.jpg}
----
== PIR
* Parrot Intermediate Representation
* kinder, gentler assembly-ish language
* still a bit strange
* heredocs?
{image: http://mksig.org/img/kakapo-disguised.jpg}
----
== imcc
* "intermediate code compiler"
* turns PIR into bytecode
* fast, sometimes
* works, mostly
* originally a prototype that escaped
{image: http://farm3.static.flickr.com/2031/2252206486_efce1517d9_d.jpg}
----
== Garbage Collection
* good performance
* fairly well encapsulated
* recently upgraded to generational mark and sweek
* all the best of the 1980s
{image: http://mksig.org/img/80s.png}
----
== PMC/Object system
* PMC - PolyMorphic Container (or Parrot Magic Cookie)
* abstract data type for all complex data structures
* usable, has its quirks
* object model can't support slightly unusual languages like JavaScript
{image: http://mksig.org/img/cookie.jpg}
----
== C/PIR boundary
* not actually a feature
* PIR calls C that calls PIR ...
* expensive to cross
* typically about 3 nested loops deep
* major bottleneck
{image: http://mksig.org/img/canadian_border.jpg}

----
== Who is Parrot for?
* anyone who wants to...
** make interoperable languages a reality
** write a new language
** learn about compiler design
** write a new GC
** join a knowledgeable and friendly bunch of OSS hackers
{image: http://farm2.static.flickr.com/1320/1367693632_175dcadda0_d.jpg}

----
== Parrot and Other VMs
* Why use Parrot instead of JVM or CLI?
** built-in multi-method dispatch
** dynamic object model
** designed first for dynamic languages
** Parrot Compiler Toolkit (used by Rakudo)
** not owned by Oracle!
{image: http://farm1.static.flickr.com/174/385123832_33d0b8952f_d.jpg}

----
== Implementation Features
* register-based
* continuation-passing style control flow
** trade execution stack for a linked list
* portability - Linux, msvc, cygwin, darwin, solaris, dragonfly
* flexible calling conventions (optional, named, positional, slurpy, etc)
* use our complete workflow, or roll your own
{image: http://farm5.static.flickr.com/4053/4482579218_d9ceb9d40f_d.jpg}

----
== Let Parrot do the work.
* you give us the abstract syntax tree, we'll take care of:
* bytecode format and handling
* basic data structures
* calling conventions
* garbage collection
* runloops
* I/O
* NCI (native call interface, i.e. calling C libraries from a langauge)
* C embedding API
{image: http://farm5.static.flickr.com/4114/4809508484_83bddd10b0_d.jpg}

----
== How's Parrot doing?
* moved to Git and GitHub from svn
* big test coverage increase from Google Code-In (thanks, students!)
* tests for makefile dependencies: reliable parallel build
* new generational mark and sweep garbage collector
* imcc encapsulation
* immutable strings
* more efficient bytecode storage
* still too slow

----
== Languages as Distinct Projects
* Rakudo living on its own
* still work together as needed
* Rakudo needs regular testing
* winxed

----
== Winxed
* superficially javascript-like syntax
* designed to compile naturally to PIR
* self-hosting with a C++ bootstraping build
* recently added to parrot.git
  # return an 'OS' PMC
  function getOS() {
      var os;
      try { loadlib('os');
          os = new ['OS'];
      }
      catch() { }
      for (;;) yield os;
  }

----
== Supporting Users
* fine-tuning our deprecation/support policy
** need to change APIs occasionally, but can't break things just because
* deprecations in a machine-readable format - api.yaml
* tool to warn users about deprecations

----
== Self-hosted Infrastructure
* self-hosted ops compiler
** ops files are defined in Parrot-flavored C
** ops2c compiles them into core_ops.c
** core_ops.c is checked into git to break the cycle
** need separate targets to build Parrot and rebootstrap ops
** we've been doing this since May '10
* PMC interfaces for ops and bytecode manipulation
* imcc is no longer a special citizen
* tree-optimization - optimize trees with patterns and transforms
** available to anyone producing a tree-like structure from PMCs
{image: http://futuresteve.files.wordpress.com/2007/10/recycle.gif}
    
----
== LLVM jitting of ops
* bacek was working on an ops -> llvm compiler
* C is nice for some things
* semantically parsing? not so much
* some problematic constructs: macros, structs, types
* good results for simple programs
* needs ops reform

----
== Growing Ecosystem
* parrot-linear-algebra - linear algebra library
* winxed - JS-like syntax, maps cleanly to PIR
* Rosella - library of libraries 
* distutils - install and build tools
* blizkost - Perl 5 embedded in Parrot
* PIRATE - self-hosted PIR compiler
* others
* with an ecosystem comes testing to find out what Parrot changes break which project

----
== Needs Work
* *more* regular automated HLL/library testing
* pcc speed/efficiency
* lexical variable implementation
* inner runloop problem
* PIR/C boundary
* sound interesting?
** drop by #parrot and we'll put you to work

----
== What's in Parrot's future?
* Google Summer of Code
** fourth year participating in Google Summer of Code
** first year as our own organization
** 6 accepted and active projects!
*** GMP Integer Bindings - Robert Kuo (Jonathan Leto)
*** JavaScript on Parrot - Rohit Jangid (Will Coleda)
*** Python3 on Parrot - Lucian Branescu Mihaila (Allison Randal)
*** LALR(1) Parser Generator - Tyler Curtis (Daniel Arbelo)
*** New Debugger - Kevin Polulak (Christoph Otto)
*** newPOST Migration - Brian Gernhardt (Vasily Chekalkin)
** follow them on their parrot.org blogs

----
== More Self-hosted Tools
* PIRATE - self-hosted PIR compiler, written in nqp
** uses tree-optimization for code optimization
** really shiny
** also, slow

----
= M0
* aggressively minimal VM, new foundation for Parrot
* as powerful as C
* can readily analyze
* no C/PIR boundary
* readily supports multiple implementations
* simple to jit, currently 37 ops

----
== Lorito
* M0 + meta-object model
* replace majority of Parrot's C components
* sufficient to implement PMCs, pcc, strings, etc
** programmatic interface for class manipulation
** objects that create classes that create objects
* implemented by jnthn in nqp and Rakudo as "6model"

----
== 6model
* Example of 6model code (from 6guts.wordpress.com)
 #class definition
 class Band {
     has $!name;
     has $!genre;
     method describe() {
         say "$!name play $!genre music";
     }
 }
 
 #code to generate class definition programmatically
 ::Band := ClassHOW.new_type();
 Band.^add_attribute(Attribute.new(name => '$!name'));
 Band.^add_attribute(Attribute.new(name => '$!genre'));
 Band.^add_method('describe', method () { ... });
 Band.^compose();

----
== What's in Parrot's future?
* TIMTOWTDI!
** PCT is built around Rakudo-y assumptions, since Rakudo hackers built them
** Larry Wall says "There is more than one way to do it."
** We want people to use Parrot, even if they don't care for nqp and grammars
+** self-hosted interoperable languages:
** we provide a bytecode format and a flexible meta-object protocol
** they can use their preferred language
** Winxed does this now, JavaScript and Python will
----
== Want to learn more?
** chat: #parrot on irc.parrot.org
** fork: github.com/parrot/parrot
** report: trac.parrot.org
** email: parrot-dev@parrot.org
** read: planet.parrotcode.org
    
----
== That's it!
 * questions?
