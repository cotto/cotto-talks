----
presentation_topic: Parrot
presentation_title: Parrot: State of the VM
presentation_place: Bellingham, WA
presentation_date: April 30, 2011
----
== Introduction
* Who should care?
** anyone who wants to...
*** experiment with language implementations
*** write a new GC, have it collect Rakudo's garbage
*** write a new toy language for a compilers class
*** output LOLCODE from Ruby
*** run on a satellite
+**** RTEMS: Parrots in SPACE - gsoc project to make Parrot run on research satellites
**** Researchers want to write in an HLL, convenience beats cost of bare metal hacking

----
== Introduction
* Where did Parrot come from?
{image: http://mksig.org/img/oneparrot.jpg}
** originally was an April Fool's day annoucement
** originally intended to support Perl 6, now Rakudo
** distinct VM rather than an evolved solution
** NO XS.  If you don't know why, you're probably happier.

----
== Introduction
** Who hacks on Parrot?  Where do they come from?
*** Australia
*** Europe: Germany, Spain, France, UK, Austria
*** Brazil
*** China
*** India
*** US: Washington, Oregon, Texas, New York, Wisconsin, Alabama, Pennsylvania

----
== Introduction 
* What is Parrot?
+**  virtual machine, tools and runtime for dynamic language implementations
**  primary product is libparrot.so (or libparrot.dll, libparrot.dylib, etc)
**  includes nqp (subset of Perl 6) for from-scratch languages (or if you like Perl 6 syntax)
**  fairly complete implementations exist of Rakudo, Partcl and Lua
**  active projects exist for JS, Ruby, Python
{image: http://mksig.org/img/something.png}

----
== Introduction
* Parrot's goals
** started as a VM for dynamic languages back when it was still a weird idea
** HLL interoperability - this is a defining requirement
** portability

----
== Introduction
* Parrot's motivation
** It's a misconception that writing a compiler has to be is hard
*** writing a web app is hard 
+**** *if* you don't have a good framework
*** production-ready modern HLLs take 10 years
*** state-of-the-art language implementations should be accessible to anyone
*** Parrot is all about providing a framework for building compilers

----
== Introduction
* Parrot features
** you give us the abstract syntax tree, we'll take care...
+** bytecode format and handling (verification, saving, loading, execution)
** PMCs (classes) for basic data structures
** calling conventions
** garbage collection
** ops
** I/O
** NCI (native call interface, i.e. calling C libraries from an HLL)
** embedding API

----
== Introduction
* Parrot and other VMs
** What makes Parrot well-suited for dynamic languages compared to traditional VMs (CLI, JVM)?
+*** built-in multi-method dispatch 
*** calling conventions (optional, named, positional, slurpy params, etc)
*** dynamic object model
*** designed first for dynamic languages
*** Parrot Compiler Toolkit (used by Rakudo)
*** You can get a commit bit for Parrot or fork and send a pull request.

----
== Introduction
* Implementation Features
** register VM - most are stack-based
** control flow is based on CPS 
*** continuations capure the essential state of the vm
** we trade a stack for a linked list
** continuations are cheap
*** no stack to capture
*** only capture the context, which is a GCable object
*** keep a pointer, it stays around.  Drop it, it's gone.

----
== How's Parrot doing?
* languages are distinct projects
** Rakudo is all grown up now and living on its own
** there's some overlap in developers between Parrot and Rakudo, but it's largely orthogonal
** we still work together as needed
** Rakudo is a primary driver of our HLL testing infrastructure
    
----
== How's Parrot doing?
* Supporting Users
** fine-tuning our deprecation/support policy
** deprecations in a machine-readable format
** basic tools to scan code and warning about deprecated functions
    
----
== How's Parrot doing?
* Recent Improvements and Changes
** moved to Git and GitHub from svn and trac (though still using trac)
** big test coverage increase from Google Code-In (thanks, students!)
** tests for makefile dependencies: reliable parallel build
** encapsulated GC (whiteknight++, GSoC '08 alumn)
** encapsulated imcc
** pcc refactor
** immutable strings
** better bytecode
** still too slow
+*** profilers and optimizers wanted!

----
== How's Parrot doing?
* Self-hosted Infrastructure
** PIR uses ops
** ops files are defined in ops-flavored C compiled into real C by ops2c
** ops2c is built in nqp
** nqp is built on Parrot
** core_ops.c is checked into git to break the cycle
** separate targets to rebuild Parrot and rebootstrap ops
** been doing this since May '10
* PMC interfaces for opcode and bytecode manipulation
* imcc is no longer a special citizen
* tree-optimization - GSoC project to optimize trees based on patterns
** available to anyone producing a tree-like structure from PMCs
    
----
== How's Parrot doing?
* LLVM jitting of ops
** bacek was working on an ops -> llvm compiler
** C is nice for some things
** If you want to semantically parse C, not so much
** problematic constructs: macros, unions, structs, type comprehension
** showing some good results for simple programs
** ops reform needed for further work
    
----
== How's Parrot doing?
* Growing Ecosystem
** lots of projects
*** parrot-linear-algebra
*** winxed
*** Rosella
*** others?
** with an ecosystem comes testing to find out what Parrot changes break which project
** dukeleto is on this, but probably too busy to get much done

----
== How's Parrot doing?
* Continuing Challenges
** regular automated HLL testing
** pcc speed/efficiency
** inner runloop problem
** PIR/C boundary

----
== What's in Parrot's future?
* Google Summer of Code
** fourth year participating in Google Summer of Code
** first year as our own organization
** 8 accepted projects!
*** JavaScript on Parrot - Rohit Jangid (Will Coleda)
*** GObject Interop - Christoph Gaertner (Andrew Whitworth)
*** GMP Integer Bindings - Robert Kuo (Jonathan Leto)
*** LALR(1) Parser Generator - Tyler Curtis (Daniel Arbelo)
*** Python3 on Parrot - Lucian Branescu Mihaila (Allison Randal)
*** New Debugger - Kevin Polulak (Christoph Otto)
*** newPOST Migration - Brian Gernhardt (Vasily Chekalkin)

----
== What's in Parrot's future?
* More Self-hosted Tools
** PIRATE - self-hosted PIR compiler, written in nqp
*** uses tree-optimization for code optimization
*** really shiny
*** also, slow

----
== What's in Parrot's future?
* M0
** aggressively minimal VM, new foundation for Parrot
** about as powerful as C, but we can easily analyze it
** most of parrot will be implemented in m0 ops
** simple to jit
** removes the need for the C/PIR boundary
** readily supports multiple implementaitons

----
== What's in Parrot's future?
* Lorito
** combination of M0 and a meta-object model
** sufficient to implement PMCs
** will replace the majority of Parrot's C components

----
== What's in Parrot's future?
* 6model
** worked on by jnthn
** programmatic interface for class manipulation
** objects that create classes that create objects

----
== What's in Parrot's future?
* emphasis on common oss runtime and compiler tools
** PCT is built around Rakudo-y assumptions, since Rakudo hackers built them
** Larry says "There is more than one way to do it."
** We want people to use Parrot, even if they don't care for nqp and grammars
+* solution: self-hosted interoperable langauges
** we'll provide a stable interface for creating bytecode and a flexible meta-object model
** they won't get ast->bytecode for free, but they can use their preferred language
** Winxed does this now, JavaScript and Python3 GSoC projects will do this too

----
== Who's in Parrot's future?
* You are!
** Drop by #parrot on irc.parrot.org
** file a ticket a trac.parrot.org
** follow blogs at planet.parrotcode.org (including GSoC progress)
    
----
== That's it!
 * questions?
 * comments?
 * pie?