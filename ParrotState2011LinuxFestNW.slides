----
presentation_topic: Parrot
presentation_title: Parrot: State of the VM
presentation_place: Bellingham, WA
presentation_date: April 30, 2011
----
== Introduction
* Who should care?
** anyone who wants to...
*** experiment with language implementations
*** write a new GC, have it collect Rakudo's garbage
*** write a new toy language for a compilers class
*** output LOLCODE from bf
*** run on a satellite
+**** RTEMS: Parrots in SPACE - gsoc project to make Parrot run on research satellites
**** Researchers want to write in an HLL, convenience beats cost of bare metal hacking

----
== Introduction
* Where did Parrot come from?
** originally was an April Fool's day annoucement
** may still be; we're not quite sure
** originally intended to support Perl 6, now Rakudo
** wanted a distinct VM rather than an evolved solution
** NO XS, because have you seen it?
** previous emphasis on supporting everything
** current emphasis a more minimalist approach

----
== Introduction
* Parrot's goals
** started as a VM for dynamic languages back when it was still a weird idea
** portability (inspired by perl)
** HLL interoperability - this is a defining requirement

----
== Introduction 
* What is Parrot?
+**  virtual machine, tools and runtime for dynamic language implementations
**  primary product is libparrot.so (or libparrot.dll, libparrot.dylib, etc)
**  includes nqp (subset of Perl 6) for from-scratch languages (or if you like Perl 6 syntax)
**  runs Rakudo, Partcl, Lua
**  active projects exist for JS, Ruby, Python
{image: http://mksig.org/img/something.png}

----
== Introduction
* It's a misconception that writing a compiler has to be is hard
** writing a web app is hard 
+*** *if* you don't have a good framework
+* Parrot is all about providing a framework for building compilers
** you give us the abstract syntax tree, we'll take care of the boilerplate
+*** bytecode format and handling (verification, saving, loading, execution)
*** PMCs (classes) for basic data structures
*** calling conventions
*** garbage collection
*** ops
*** I/O
*** NCI (native call interface, similar to ffi)
*** embedding API
*** extending API

----
== Introduction
* What makes Parrot well-suited for dynamic languages compared to traditional VMs (CLI, JVM)?
+** built-in multi-method dispatch 
** calling conventions (ptional and named params, etc)
** dynamic object model
** designed first for dynamic languages
** Parrot Compiler Toolkit (used by Rakudo)

----
== Introduction

* Implementation Features
**  register VM - most are stack-based
**  control flow is based on CPS - continuations that capure the essential state of the vm
**  trade a stack for a linked list
**  how to make continuations cheap?
***  no stack to capture
***  only capture the context, which is GC'd

----
== Introduction
** Who hacks on Parrot?  Where do they come from? (world map with points)
    quick idea, don't get tedious
    cover their backgrounds, etc

----
CUT THIS OUT
== Introduction
** it takes an extraordinary amount of effort just to get a modern HLL that people will take seriously
** Parrot wants to make state-of-the-art language implementations accessible to anyone
* Our emphasis is now a common oss runtime and set of compiler tools for building dynamic languages
** our tools are built around Rakudo-y assumptions because Rakudo hackers built them
** Larry says, "There is more than one way to do it."
** We want people to use Parrot, even if they don't care for nqp and grammars

---
CUT THIS OUT-
== Introduction
 * regular releases
    You should do them.
    they saved Parrot from death and made releases a routine and predictable process (insert joke)
    If you know git, you (yes you) could cut a release right now using the instructions.
    If not, that's a bug.
    have a code freeze the weekend before, cut the release on Tues
    longer freeze for supported releases
    We don't know what features will be in 9.0, but we know what day it'll happen on.

----
== How's Parrot doing?
 * Rakudo is all growed up
    still work together as needed
    some overlap in developers, mostly orthogonal
    a primary driver of our HLL testing infrastructure
 * it's too slow (why, what are the fixes?)
    profilers and optimizers wanted!
    
----
== How's Parrot doing?
 * current work on deprecation/support policy
    have deprecations in a machine-readable format
    have basic tools to scan code looking for (and yelling about) deprecated functions
    
----
== How's Parrot doing?
 * encapsulated GC (whiteknight++)
 * encapsulated imcc
 * pcc refactor
 * better strings
 * better bytecode
    
----
== How's Parrot doing?
 * self-hosted ops compiler
    Parrot is built with ops
    ops files are compiled into core_ops.c and dynops files by ops2c
    ops2c is build in nqp
    nqp is built on Parrot
    core_ops.c is checked into git to break the cycle
    separate targets to rebuild Parrot and rebootstrap ops
    been doing this since may '10
    
----
== How's Parrot doing?
 * bacek working on ops -> llvm compiler (difficulties)
    C is nice for some things
    for semantic parsing, not so much
    problematic constructs: macros, unions, structs
    showing some good results for simple programs
    ops reform is needed for further work
    
----
== How's Parrot doing?
 * growing ecosystem
    lots of projects (name some recent ones)
    with an ecosystem comes testing to find out what Parrot changes break which project
    dukeleto is on this, but probably too busy to get much done
    
----
== How's Parrot doing?
 * big challenges - HLL testing, pcc speed, inner runloop, PIR/C boundary (VERIFY w/ valgrind)
 * Perl 5 in Perl 6

----
== What's in Parrot's future?
 * Google Summer of Code
** JavaScript on Parrot - Rohit Jangid (Will Coleda)
** GObject Interop - Christoph Gaertner (Andrew Whitworth)
** GMP Integer Bindings - Robert Kuo (Jonathan Leto)
** LALR(1) Parser Generator - Tyler Curtis (Daniel Arbelo)
** Python3 on Parrot - Lucian Branescu Mihaila (Allison Randal)
** New Debugger - Kevin Polulak (Christoph Otto)
** newPOST Migration - Brian Gernhardt (Vasily Chekalkin)

----
== What's in Parrot's future?
 * M0
    aggressively minimal VM, new foundation for Parrot
    about as powerful as C, but we can easily analyze it
    most of parrot will be implemented in m0 ops
    simple to jit
    removes the need for the C/PIR boundary

----
== What's in Parrot's future?
 * Lorito
    combination of M0 and a meta-object model
    sufficient to implement PMCs

----
== What's in Parrot's future?
 * 6model
    worked on by jnthn
    objects that create classes that create objects

----
== What's in Parrot's future?
 * self-hosted interoperable langauges
    for existing languages, nqp might not be attractive
    they won't get ast->bytecode for free, but...
    they will get a stable interface for creating bytecode
    and a flexible meta-object model


----
== What's in Parrot's future?
 * cover roadmap goals and progress
    
----
== That's it!
 * questions?
 * comments?
 * robots?

